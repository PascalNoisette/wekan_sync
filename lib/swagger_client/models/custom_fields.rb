=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module SwaggerClient
  # A custom field on a card in the board
  class CustomFields
    # the ID of the board 
    attr_accessor :board_ids

    # name of the custom field 
    attr_accessor :name

    # type of the custom field 
    attr_accessor :type

    # settings of the custom field 
    attr_accessor :settings

    # should we show on the cards this custom field 
    attr_accessor :show_on_card

    # should the custom fields automatically be added on cards? 
    attr_accessor :automatically_on_card

    # should the label of the custom field be shown on minicards? 
    attr_accessor :show_label_on_mini_card

    attr_accessor :created_at

    attr_accessor :modified_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'board_ids' => :'boardIds',
        :'name' => :'name',
        :'type' => :'type',
        :'settings' => :'settings',
        :'show_on_card' => :'showOnCard',
        :'automatically_on_card' => :'automaticallyOnCard',
        :'show_label_on_mini_card' => :'showLabelOnMiniCard',
        :'created_at' => :'createdAt',
        :'modified_at' => :'modifiedAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'board_ids' => :'Array<String>',
        :'name' => :'String',
        :'type' => :'String',
        :'settings' => :'CustomFieldsSettings',
        :'show_on_card' => :'BOOLEAN',
        :'automatically_on_card' => :'BOOLEAN',
        :'show_label_on_mini_card' => :'BOOLEAN',
        :'created_at' => :'String',
        :'modified_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'boardIds')
        if (value = attributes[:'boardIds']).is_a?(Array)
          self.board_ids = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'settings')
        self.settings = attributes[:'settings']
      end

      if attributes.has_key?(:'showOnCard')
        self.show_on_card = attributes[:'showOnCard']
      end

      if attributes.has_key?(:'automaticallyOnCard')
        self.automatically_on_card = attributes[:'automaticallyOnCard']
      end

      if attributes.has_key?(:'showLabelOnMiniCard')
        self.show_label_on_mini_card = attributes[:'showLabelOnMiniCard']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'modifiedAt')
        self.modified_at = attributes[:'modifiedAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @board_ids.nil?
        invalid_properties.push('invalid value for "board_ids", board_ids cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @settings.nil?
        invalid_properties.push('invalid value for "settings", settings cannot be nil.')
      end

      if @show_on_card.nil?
        invalid_properties.push('invalid value for "show_on_card", show_on_card cannot be nil.')
      end

      if @automatically_on_card.nil?
        invalid_properties.push('invalid value for "automatically_on_card", automatically_on_card cannot be nil.')
      end

      if @show_label_on_mini_card.nil?
        invalid_properties.push('invalid value for "show_label_on_mini_card", show_label_on_mini_card cannot be nil.')
      end

      if @modified_at.nil?
        invalid_properties.push('invalid value for "modified_at", modified_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @board_ids.nil?
      return false if @name.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['text', 'number', 'date', 'dropdown', 'currency'])
      return false unless type_validator.valid?(@type)
      return false if @settings.nil?
      return false if @show_on_card.nil?
      return false if @automatically_on_card.nil?
      return false if @show_label_on_mini_card.nil?
      return false if @modified_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['text', 'number', 'date', 'dropdown', 'currency'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          board_ids == o.board_ids &&
          name == o.name &&
          type == o.type &&
          settings == o.settings &&
          show_on_card == o.show_on_card &&
          automatically_on_card == o.automatically_on_card &&
          show_label_on_mini_card == o.show_label_on_mini_card &&
          created_at == o.created_at &&
          modified_at == o.modified_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [board_ids, name, type, settings, show_on_card, automatically_on_card, show_label_on_mini_card, created_at, modified_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
