=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module SwaggerClient
  # This is a Board.
  class Boards
    # The title of the board 
    attr_accessor :title

    # The title slugified. 
    attr_accessor :slug

    # Is the board archived? 
    attr_accessor :archived

    # Creation time of the board 
    attr_accessor :created_at

    # Last modification time of the board 
    attr_accessor :modified_at

    # How many stars the board has 
    attr_accessor :stars

    # List of labels attached to a board 
    attr_accessor :labels

    # List of members of a board 
    attr_accessor :members

    # visibility of the board 
    attr_accessor :permission

    # The color of the board. 
    attr_accessor :color

    # The description of the board 
    attr_accessor :description

    # The default board ID assigned to subtasks. 
    attr_accessor :subtasks_default_board_id

    # The default List ID assigned to subtasks. 
    attr_accessor :subtasks_default_list_id

    attr_accessor :date_settings_default_board_id

    attr_accessor :date_settings_default_list_id

    # Does the board allows subtasks? 
    attr_accessor :allows_subtasks

    # Does the board allows attachments? 
    attr_accessor :allows_attachments

    # Does the board allows checklists? 
    attr_accessor :allows_checklists

    # Does the board allows comments? 
    attr_accessor :allows_comments

    # Does the board allows description title? 
    attr_accessor :allows_description_title

    # Does the board allows description text? 
    attr_accessor :allows_description_text

    # Does the board allows comments? 
    attr_accessor :allows_activities

    # Does the board allows labels? 
    attr_accessor :allows_labels

    # Does the board allows assignee? 
    attr_accessor :allows_assignee

    # Does the board allows members? 
    attr_accessor :allows_members

    # Does the board allows requested by? 
    attr_accessor :allows_requested_by

    # Does the board allows requested by? 
    attr_accessor :allows_assigned_by

    # Does the board allows received date? 
    attr_accessor :allows_received_date

    # Does the board allows start date? 
    attr_accessor :allows_start_date

    # Does the board allows end date? 
    attr_accessor :allows_end_date

    # Does the board allows due date? 
    attr_accessor :allows_due_date

    # Controls how to present the parent task:  - `prefix-with-full-path`: add a prefix with the full path - `prefix-with-parent`: add a prefisx with the parent name - `subtext-with-full-path`: add a subtext with the full path - `subtext-with-parent`: add a subtext with the parent name - `no-parent`: does not show the parent at all 
    attr_accessor :present_parent_task

    # Starting date of the board. 
    attr_accessor :start_at

    # Due date of the board. 
    attr_accessor :due_at

    # End date of the board. 
    attr_accessor :end_at

    # Time spent in the board. 
    attr_accessor :spent_time

    # Is the board overtimed? 
    attr_accessor :is_overtime

    # The type of board 
    attr_accessor :type

    # Sort value 
    attr_accessor :sort

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'title' => :'title',
        :'slug' => :'slug',
        :'archived' => :'archived',
        :'created_at' => :'createdAt',
        :'modified_at' => :'modifiedAt',
        :'stars' => :'stars',
        :'labels' => :'labels',
        :'members' => :'members',
        :'permission' => :'permission',
        :'color' => :'color',
        :'description' => :'description',
        :'subtasks_default_board_id' => :'subtasksDefaultBoardId',
        :'subtasks_default_list_id' => :'subtasksDefaultListId',
        :'date_settings_default_board_id' => :'dateSettingsDefaultBoardId',
        :'date_settings_default_list_id' => :'dateSettingsDefaultListId',
        :'allows_subtasks' => :'allowsSubtasks',
        :'allows_attachments' => :'allowsAttachments',
        :'allows_checklists' => :'allowsChecklists',
        :'allows_comments' => :'allowsComments',
        :'allows_description_title' => :'allowsDescriptionTitle',
        :'allows_description_text' => :'allowsDescriptionText',
        :'allows_activities' => :'allowsActivities',
        :'allows_labels' => :'allowsLabels',
        :'allows_assignee' => :'allowsAssignee',
        :'allows_members' => :'allowsMembers',
        :'allows_requested_by' => :'allowsRequestedBy',
        :'allows_assigned_by' => :'allowsAssignedBy',
        :'allows_received_date' => :'allowsReceivedDate',
        :'allows_start_date' => :'allowsStartDate',
        :'allows_end_date' => :'allowsEndDate',
        :'allows_due_date' => :'allowsDueDate',
        :'present_parent_task' => :'presentParentTask',
        :'start_at' => :'startAt',
        :'due_at' => :'dueAt',
        :'end_at' => :'endAt',
        :'spent_time' => :'spentTime',
        :'is_overtime' => :'isOvertime',
        :'type' => :'type',
        :'sort' => :'sort'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'title' => :'String',
        :'slug' => :'String',
        :'archived' => :'BOOLEAN',
        :'created_at' => :'String',
        :'modified_at' => :'String',
        :'stars' => :'Float',
        :'labels' => :'Array<BoardsLabels>',
        :'members' => :'Array<BoardsMembers>',
        :'permission' => :'String',
        :'color' => :'String',
        :'description' => :'String',
        :'subtasks_default_board_id' => :'String',
        :'subtasks_default_list_id' => :'String',
        :'date_settings_default_board_id' => :'String',
        :'date_settings_default_list_id' => :'String',
        :'allows_subtasks' => :'BOOLEAN',
        :'allows_attachments' => :'BOOLEAN',
        :'allows_checklists' => :'BOOLEAN',
        :'allows_comments' => :'BOOLEAN',
        :'allows_description_title' => :'BOOLEAN',
        :'allows_description_text' => :'BOOLEAN',
        :'allows_activities' => :'BOOLEAN',
        :'allows_labels' => :'BOOLEAN',
        :'allows_assignee' => :'BOOLEAN',
        :'allows_members' => :'BOOLEAN',
        :'allows_requested_by' => :'BOOLEAN',
        :'allows_assigned_by' => :'BOOLEAN',
        :'allows_received_date' => :'BOOLEAN',
        :'allows_start_date' => :'BOOLEAN',
        :'allows_end_date' => :'BOOLEAN',
        :'allows_due_date' => :'BOOLEAN',
        :'present_parent_task' => :'String',
        :'start_at' => :'String',
        :'due_at' => :'String',
        :'end_at' => :'String',
        :'spent_time' => :'Float',
        :'is_overtime' => :'BOOLEAN',
        :'type' => :'String',
        :'sort' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'modifiedAt')
        self.modified_at = attributes[:'modifiedAt']
      end

      if attributes.has_key?(:'stars')
        self.stars = attributes[:'stars']
      end

      if attributes.has_key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.has_key?(:'members')
        if (value = attributes[:'members']).is_a?(Array)
          self.members = value
        end
      end

      if attributes.has_key?(:'permission')
        self.permission = attributes[:'permission']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'subtasksDefaultBoardId')
        self.subtasks_default_board_id = attributes[:'subtasksDefaultBoardId']
      end

      if attributes.has_key?(:'subtasksDefaultListId')
        self.subtasks_default_list_id = attributes[:'subtasksDefaultListId']
      end

      if attributes.has_key?(:'dateSettingsDefaultBoardId')
        self.date_settings_default_board_id = attributes[:'dateSettingsDefaultBoardId']
      end

      if attributes.has_key?(:'dateSettingsDefaultListId')
        self.date_settings_default_list_id = attributes[:'dateSettingsDefaultListId']
      end

      if attributes.has_key?(:'allowsSubtasks')
        self.allows_subtasks = attributes[:'allowsSubtasks']
      end

      if attributes.has_key?(:'allowsAttachments')
        self.allows_attachments = attributes[:'allowsAttachments']
      end

      if attributes.has_key?(:'allowsChecklists')
        self.allows_checklists = attributes[:'allowsChecklists']
      end

      if attributes.has_key?(:'allowsComments')
        self.allows_comments = attributes[:'allowsComments']
      end

      if attributes.has_key?(:'allowsDescriptionTitle')
        self.allows_description_title = attributes[:'allowsDescriptionTitle']
      end

      if attributes.has_key?(:'allowsDescriptionText')
        self.allows_description_text = attributes[:'allowsDescriptionText']
      end

      if attributes.has_key?(:'allowsActivities')
        self.allows_activities = attributes[:'allowsActivities']
      end

      if attributes.has_key?(:'allowsLabels')
        self.allows_labels = attributes[:'allowsLabels']
      end

      if attributes.has_key?(:'allowsAssignee')
        self.allows_assignee = attributes[:'allowsAssignee']
      end

      if attributes.has_key?(:'allowsMembers')
        self.allows_members = attributes[:'allowsMembers']
      end

      if attributes.has_key?(:'allowsRequestedBy')
        self.allows_requested_by = attributes[:'allowsRequestedBy']
      end

      if attributes.has_key?(:'allowsAssignedBy')
        self.allows_assigned_by = attributes[:'allowsAssignedBy']
      end

      if attributes.has_key?(:'allowsReceivedDate')
        self.allows_received_date = attributes[:'allowsReceivedDate']
      end

      if attributes.has_key?(:'allowsStartDate')
        self.allows_start_date = attributes[:'allowsStartDate']
      end

      if attributes.has_key?(:'allowsEndDate')
        self.allows_end_date = attributes[:'allowsEndDate']
      end

      if attributes.has_key?(:'allowsDueDate')
        self.allows_due_date = attributes[:'allowsDueDate']
      end

      if attributes.has_key?(:'presentParentTask')
        self.present_parent_task = attributes[:'presentParentTask']
      end

      if attributes.has_key?(:'startAt')
        self.start_at = attributes[:'startAt']
      end

      if attributes.has_key?(:'dueAt')
        self.due_at = attributes[:'dueAt']
      end

      if attributes.has_key?(:'endAt')
        self.end_at = attributes[:'endAt']
      end

      if attributes.has_key?(:'spentTime')
        self.spent_time = attributes[:'spentTime']
      end

      if attributes.has_key?(:'isOvertime')
        self.is_overtime = attributes[:'isOvertime']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @slug.nil?
        invalid_properties.push('invalid value for "slug", slug cannot be nil.')
      end

      if @archived.nil?
        invalid_properties.push('invalid value for "archived", archived cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @stars.nil?
        invalid_properties.push('invalid value for "stars", stars cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @members.nil?
        invalid_properties.push('invalid value for "members", members cannot be nil.')
      end

      if @permission.nil?
        invalid_properties.push('invalid value for "permission", permission cannot be nil.')
      end

      if @color.nil?
        invalid_properties.push('invalid value for "color", color cannot be nil.')
      end

      if @allows_subtasks.nil?
        invalid_properties.push('invalid value for "allows_subtasks", allows_subtasks cannot be nil.')
      end

      if @allows_attachments.nil?
        invalid_properties.push('invalid value for "allows_attachments", allows_attachments cannot be nil.')
      end

      if @allows_checklists.nil?
        invalid_properties.push('invalid value for "allows_checklists", allows_checklists cannot be nil.')
      end

      if @allows_comments.nil?
        invalid_properties.push('invalid value for "allows_comments", allows_comments cannot be nil.')
      end

      if @allows_description_title.nil?
        invalid_properties.push('invalid value for "allows_description_title", allows_description_title cannot be nil.')
      end

      if @allows_description_text.nil?
        invalid_properties.push('invalid value for "allows_description_text", allows_description_text cannot be nil.')
      end

      if @allows_activities.nil?
        invalid_properties.push('invalid value for "allows_activities", allows_activities cannot be nil.')
      end

      if @allows_labels.nil?
        invalid_properties.push('invalid value for "allows_labels", allows_labels cannot be nil.')
      end

      if @allows_assignee.nil?
        invalid_properties.push('invalid value for "allows_assignee", allows_assignee cannot be nil.')
      end

      if @allows_members.nil?
        invalid_properties.push('invalid value for "allows_members", allows_members cannot be nil.')
      end

      if @allows_requested_by.nil?
        invalid_properties.push('invalid value for "allows_requested_by", allows_requested_by cannot be nil.')
      end

      if @allows_assigned_by.nil?
        invalid_properties.push('invalid value for "allows_assigned_by", allows_assigned_by cannot be nil.')
      end

      if @allows_received_date.nil?
        invalid_properties.push('invalid value for "allows_received_date", allows_received_date cannot be nil.')
      end

      if @allows_start_date.nil?
        invalid_properties.push('invalid value for "allows_start_date", allows_start_date cannot be nil.')
      end

      if @allows_end_date.nil?
        invalid_properties.push('invalid value for "allows_end_date", allows_end_date cannot be nil.')
      end

      if @allows_due_date.nil?
        invalid_properties.push('invalid value for "allows_due_date", allows_due_date cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @sort.nil?
        invalid_properties.push('invalid value for "sort", sort cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      return false if @slug.nil?
      return false if @archived.nil?
      return false if @created_at.nil?
      return false if @stars.nil?
      return false if @labels.nil?
      return false if @members.nil?
      return false if @permission.nil?
      permission_validator = EnumAttributeValidator.new('String', ['public', 'private'])
      return false unless permission_validator.valid?(@permission)
      return false if @color.nil?
      color_validator = EnumAttributeValidator.new('String', ['belize', 'nephritis', 'pomegranate', 'pumpkin', 'wisteria', 'moderatepink', 'strongcyan', 'limegreen', 'midnight', 'dark', 'relax', 'corteza', 'clearblue', 'natural', 'modern'])
      return false unless color_validator.valid?(@color)
      return false if @allows_subtasks.nil?
      return false if @allows_attachments.nil?
      return false if @allows_checklists.nil?
      return false if @allows_comments.nil?
      return false if @allows_description_title.nil?
      return false if @allows_description_text.nil?
      return false if @allows_activities.nil?
      return false if @allows_labels.nil?
      return false if @allows_assignee.nil?
      return false if @allows_members.nil?
      return false if @allows_requested_by.nil?
      return false if @allows_assigned_by.nil?
      return false if @allows_received_date.nil?
      return false if @allows_start_date.nil?
      return false if @allows_end_date.nil?
      return false if @allows_due_date.nil?
      present_parent_task_validator = EnumAttributeValidator.new('String', ['prefix-with-full-path', 'prefix-with-parent', 'subtext-with-full-path', 'subtext-with-parent', 'no-parent'])
      return false unless present_parent_task_validator.valid?(@present_parent_task)
      return false if @type.nil?
      return false if @sort.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permission Object to be assigned
    def permission=(permission)
      validator = EnumAttributeValidator.new('String', ['public', 'private'])
      unless validator.valid?(permission)
        fail ArgumentError, 'invalid value for "permission", must be one of #{validator.allowable_values}.'
      end
      @permission = permission
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color Object to be assigned
    def color=(color)
      validator = EnumAttributeValidator.new('String', ['belize', 'nephritis', 'pomegranate', 'pumpkin', 'wisteria', 'moderatepink', 'strongcyan', 'limegreen', 'midnight', 'dark', 'relax', 'corteza', 'clearblue', 'natural', 'modern'])
      unless validator.valid?(color)
        fail ArgumentError, 'invalid value for "color", must be one of #{validator.allowable_values}.'
      end
      @color = color
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] present_parent_task Object to be assigned
    def present_parent_task=(present_parent_task)
      validator = EnumAttributeValidator.new('String', ['prefix-with-full-path', 'prefix-with-parent', 'subtext-with-full-path', 'subtext-with-parent', 'no-parent'])
      unless validator.valid?(present_parent_task)
        fail ArgumentError, 'invalid value for "present_parent_task", must be one of #{validator.allowable_values}.'
      end
      @present_parent_task = present_parent_task
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          title == o.title &&
          slug == o.slug &&
          archived == o.archived &&
          created_at == o.created_at &&
          modified_at == o.modified_at &&
          stars == o.stars &&
          labels == o.labels &&
          members == o.members &&
          permission == o.permission &&
          color == o.color &&
          description == o.description &&
          subtasks_default_board_id == o.subtasks_default_board_id &&
          subtasks_default_list_id == o.subtasks_default_list_id &&
          date_settings_default_board_id == o.date_settings_default_board_id &&
          date_settings_default_list_id == o.date_settings_default_list_id &&
          allows_subtasks == o.allows_subtasks &&
          allows_attachments == o.allows_attachments &&
          allows_checklists == o.allows_checklists &&
          allows_comments == o.allows_comments &&
          allows_description_title == o.allows_description_title &&
          allows_description_text == o.allows_description_text &&
          allows_activities == o.allows_activities &&
          allows_labels == o.allows_labels &&
          allows_assignee == o.allows_assignee &&
          allows_members == o.allows_members &&
          allows_requested_by == o.allows_requested_by &&
          allows_assigned_by == o.allows_assigned_by &&
          allows_received_date == o.allows_received_date &&
          allows_start_date == o.allows_start_date &&
          allows_end_date == o.allows_end_date &&
          allows_due_date == o.allows_due_date &&
          present_parent_task == o.present_parent_task &&
          start_at == o.start_at &&
          due_at == o.due_at &&
          end_at == o.end_at &&
          spent_time == o.spent_time &&
          is_overtime == o.is_overtime &&
          type == o.type &&
          sort == o.sort
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [title, slug, archived, created_at, modified_at, stars, labels, members, permission, color, description, subtasks_default_board_id, subtasks_default_list_id, date_settings_default_board_id, date_settings_default_list_id, allows_subtasks, allows_attachments, allows_checklists, allows_comments, allows_description_title, allows_description_text, allows_activities, allows_labels, allows_assignee, allows_members, allows_requested_by, allows_assigned_by, allows_received_date, allows_start_date, allows_end_date, allows_due_date, present_parent_task, start_at, due_at, end_at, spent_time, is_overtime, type, sort].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
