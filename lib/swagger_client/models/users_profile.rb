=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'date'

module SwaggerClient
  class UsersProfile
    # URL of the avatar of the user 
    attr_accessor :avatar_url

    # list of email buffers of the user 
    attr_accessor :email_buffer

    # full name of the user 
    attr_accessor :fullname

    # does the user want to hide system messages? 
    attr_accessor :show_desktop_drag_handles

    # does the user want to hide checked checklist items? 
    attr_accessor :hide_checked_items

    # does the user want to hide system messages? 
    attr_accessor :hidden_system_messages

    # does the user want to hide minicard label texts? 
    attr_accessor :hidden_minicard_label_text

    # initials of the user 
    attr_accessor :initials

    # board IDs the user has been invited to 
    attr_accessor :invited_boards

    # language of the user 
    attr_accessor :language

    # enabled notifications for the user 
    attr_accessor :notifications

    # The id of the activity this notification references 
    attr_accessor :activity

    # the date on which this notification was read 
    attr_accessor :read

    # showCardCountAt field of the user 
    attr_accessor :show_cards_count_at

    # startDayOfWeek field of the user 
    attr_accessor :start_day_of_week

    # list of starred board IDs 
    attr_accessor :starred_boards

    # icode 
    attr_accessor :icode

    # boardView field of the user 
    attr_accessor :board_view

    # default sort list for user 
    attr_accessor :list_sort_by

    # Reference to the templates board 
    attr_accessor :templates_board_id

    # Reference to the card templates swimlane Id 
    attr_accessor :card_templates_swimlane_id

    # Reference to the list templates swimlane Id 
    attr_accessor :list_templates_swimlane_id

    # Reference to the board templates swimlane Id 
    attr_accessor :board_templates_swimlane_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'avatar_url' => :'avatarUrl',
        :'email_buffer' => :'emailBuffer',
        :'fullname' => :'fullname',
        :'show_desktop_drag_handles' => :'showDesktopDragHandles',
        :'hide_checked_items' => :'hideCheckedItems',
        :'hidden_system_messages' => :'hiddenSystemMessages',
        :'hidden_minicard_label_text' => :'hiddenMinicardLabelText',
        :'initials' => :'initials',
        :'invited_boards' => :'invitedBoards',
        :'language' => :'language',
        :'notifications' => :'notifications',
        :'activity' => :'activity',
        :'read' => :'read',
        :'show_cards_count_at' => :'showCardsCountAt',
        :'start_day_of_week' => :'startDayOfWeek',
        :'starred_boards' => :'starredBoards',
        :'icode' => :'icode',
        :'board_view' => :'boardView',
        :'list_sort_by' => :'listSortBy',
        :'templates_board_id' => :'templatesBoardId',
        :'card_templates_swimlane_id' => :'cardTemplatesSwimlaneId',
        :'list_templates_swimlane_id' => :'listTemplatesSwimlaneId',
        :'board_templates_swimlane_id' => :'boardTemplatesSwimlaneId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'avatar_url' => :'String',
        :'email_buffer' => :'Array<String>',
        :'fullname' => :'String',
        :'show_desktop_drag_handles' => :'BOOLEAN',
        :'hide_checked_items' => :'BOOLEAN',
        :'hidden_system_messages' => :'BOOLEAN',
        :'hidden_minicard_label_text' => :'BOOLEAN',
        :'initials' => :'String',
        :'invited_boards' => :'Array<String>',
        :'language' => :'String',
        :'notifications' => :'Array<UsersProfileNotifications>',
        :'activity' => :'String',
        :'read' => :'String',
        :'show_cards_count_at' => :'Float',
        :'start_day_of_week' => :'Float',
        :'starred_boards' => :'Array<String>',
        :'icode' => :'String',
        :'board_view' => :'String',
        :'list_sort_by' => :'String',
        :'templates_board_id' => :'String',
        :'card_templates_swimlane_id' => :'String',
        :'list_templates_swimlane_id' => :'String',
        :'board_templates_swimlane_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'avatarUrl')
        self.avatar_url = attributes[:'avatarUrl']
      end

      if attributes.has_key?(:'emailBuffer')
        if (value = attributes[:'emailBuffer']).is_a?(Array)
          self.email_buffer = value
        end
      end

      if attributes.has_key?(:'fullname')
        self.fullname = attributes[:'fullname']
      end

      if attributes.has_key?(:'showDesktopDragHandles')
        self.show_desktop_drag_handles = attributes[:'showDesktopDragHandles']
      end

      if attributes.has_key?(:'hideCheckedItems')
        self.hide_checked_items = attributes[:'hideCheckedItems']
      end

      if attributes.has_key?(:'hiddenSystemMessages')
        self.hidden_system_messages = attributes[:'hiddenSystemMessages']
      end

      if attributes.has_key?(:'hiddenMinicardLabelText')
        self.hidden_minicard_label_text = attributes[:'hiddenMinicardLabelText']
      end

      if attributes.has_key?(:'initials')
        self.initials = attributes[:'initials']
      end

      if attributes.has_key?(:'invitedBoards')
        if (value = attributes[:'invitedBoards']).is_a?(Array)
          self.invited_boards = value
        end
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'notifications')
        if (value = attributes[:'notifications']).is_a?(Array)
          self.notifications = value
        end
      end

      if attributes.has_key?(:'activity')
        self.activity = attributes[:'activity']
      end

      if attributes.has_key?(:'read')
        self.read = attributes[:'read']
      end

      if attributes.has_key?(:'showCardsCountAt')
        self.show_cards_count_at = attributes[:'showCardsCountAt']
      end

      if attributes.has_key?(:'startDayOfWeek')
        self.start_day_of_week = attributes[:'startDayOfWeek']
      end

      if attributes.has_key?(:'starredBoards')
        if (value = attributes[:'starredBoards']).is_a?(Array)
          self.starred_boards = value
        end
      end

      if attributes.has_key?(:'icode')
        self.icode = attributes[:'icode']
      end

      if attributes.has_key?(:'boardView')
        self.board_view = attributes[:'boardView']
      end

      if attributes.has_key?(:'listSortBy')
        self.list_sort_by = attributes[:'listSortBy']
      end

      if attributes.has_key?(:'templatesBoardId')
        self.templates_board_id = attributes[:'templatesBoardId']
      end

      if attributes.has_key?(:'cardTemplatesSwimlaneId')
        self.card_templates_swimlane_id = attributes[:'cardTemplatesSwimlaneId']
      end

      if attributes.has_key?(:'listTemplatesSwimlaneId')
        self.list_templates_swimlane_id = attributes[:'listTemplatesSwimlaneId']
      end

      if attributes.has_key?(:'boardTemplatesSwimlaneId')
        self.board_templates_swimlane_id = attributes[:'boardTemplatesSwimlaneId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @activity.nil?
        invalid_properties.push('invalid value for "activity", activity cannot be nil.')
      end

      if @templates_board_id.nil?
        invalid_properties.push('invalid value for "templates_board_id", templates_board_id cannot be nil.')
      end

      if @card_templates_swimlane_id.nil?
        invalid_properties.push('invalid value for "card_templates_swimlane_id", card_templates_swimlane_id cannot be nil.')
      end

      if @list_templates_swimlane_id.nil?
        invalid_properties.push('invalid value for "list_templates_swimlane_id", list_templates_swimlane_id cannot be nil.')
      end

      if @board_templates_swimlane_id.nil?
        invalid_properties.push('invalid value for "board_templates_swimlane_id", board_templates_swimlane_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @activity.nil?
      board_view_validator = EnumAttributeValidator.new('String', ['board-view-swimlanes', 'board-view-lists', 'board-view-cal'])
      return false unless board_view_validator.valid?(@board_view)
      list_sort_by_validator = EnumAttributeValidator.new('String', ['-modifiedat', 'modifiedat', '-title', 'title', '-sort', 'sort'])
      return false unless list_sort_by_validator.valid?(@list_sort_by)
      return false if @templates_board_id.nil?
      return false if @card_templates_swimlane_id.nil?
      return false if @list_templates_swimlane_id.nil?
      return false if @board_templates_swimlane_id.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] board_view Object to be assigned
    def board_view=(board_view)
      validator = EnumAttributeValidator.new('String', ['board-view-swimlanes', 'board-view-lists', 'board-view-cal'])
      unless validator.valid?(board_view)
        fail ArgumentError, 'invalid value for "board_view", must be one of #{validator.allowable_values}.'
      end
      @board_view = board_view
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] list_sort_by Object to be assigned
    def list_sort_by=(list_sort_by)
      validator = EnumAttributeValidator.new('String', ['-modifiedat', 'modifiedat', '-title', 'title', '-sort', 'sort'])
      unless validator.valid?(list_sort_by)
        fail ArgumentError, 'invalid value for "list_sort_by", must be one of #{validator.allowable_values}.'
      end
      @list_sort_by = list_sort_by
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          avatar_url == o.avatar_url &&
          email_buffer == o.email_buffer &&
          fullname == o.fullname &&
          show_desktop_drag_handles == o.show_desktop_drag_handles &&
          hide_checked_items == o.hide_checked_items &&
          hidden_system_messages == o.hidden_system_messages &&
          hidden_minicard_label_text == o.hidden_minicard_label_text &&
          initials == o.initials &&
          invited_boards == o.invited_boards &&
          language == o.language &&
          notifications == o.notifications &&
          activity == o.activity &&
          read == o.read &&
          show_cards_count_at == o.show_cards_count_at &&
          start_day_of_week == o.start_day_of_week &&
          starred_boards == o.starred_boards &&
          icode == o.icode &&
          board_view == o.board_view &&
          list_sort_by == o.list_sort_by &&
          templates_board_id == o.templates_board_id &&
          card_templates_swimlane_id == o.card_templates_swimlane_id &&
          list_templates_swimlane_id == o.list_templates_swimlane_id &&
          board_templates_swimlane_id == o.board_templates_swimlane_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [avatar_url, email_buffer, fullname, show_desktop_drag_handles, hide_checked_items, hidden_system_messages, hidden_minicard_label_text, initials, invited_boards, language, notifications, activity, read, show_cards_count_at, start_day_of_week, starred_boards, icode, board_view, list_sort_by, templates_board_id, card_templates_swimlane_id, list_templates_swimlane_id, board_templates_swimlane_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
