=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class ListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a List
    # This **deletes** a list from a board.  The list is not put in the recycle bin. 
    # @param board the board ID 
    # @param list the ID of the list to remove 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def delete_list(board, list, opts = {})
      data, _status_code, _headers = delete_list_with_http_info(board, list, opts)
      data
    end

    # Delete a List
    # This **deletes** a list from a board.  The list is not put in the recycle bin. 
    # @param board the board ID 
    # @param list the ID of the list to remove 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def delete_list_with_http_info(board, list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.delete_list ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling ListsApi.delete_list"
      end
      # verify the required parameter 'list' is set
      if @api_client.config.client_side_validation && list.nil?
        fail ArgumentError, "Missing the required parameter 'list' when calling ListsApi.delete_list"
      end
      # resource path
      local_var_path = '/api/boards/{board}/lists/{list}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'list' + '}', list.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#delete_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of Lists attached to a board
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse200>]
    def get_all_lists(board, opts = {})
      data, _status_code, _headers = get_all_lists_with_http_info(board, opts)
      data
    end

    # Get the list of Lists attached to a board
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def get_all_lists_with_http_info(board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.get_all_lists ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling ListsApi.get_all_lists"
      end
      # resource path
      local_var_path = '/api/boards/{board}/lists'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_all_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a List attached to a board
    # @param board the board ID 
    # @param list the List ID 
    # @param [Hash] opts the optional parameters
    # @return [Lists]
    def get_list(board, list, opts = {})
      data, _status_code, _headers = get_list_with_http_info(board, list, opts)
      data
    end

    # Get a List attached to a board
    # @param board the board ID 
    # @param list the List ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lists, Fixnum, Hash)>] Lists data, response status code and response headers
    def get_list_with_http_info(board, list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.get_list ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling ListsApi.get_list"
      end
      # verify the required parameter 'list' is set
      if @api_client.config.client_side_validation && list.nil?
        fail ArgumentError, "Missing the required parameter 'list' when calling ListsApi.get_list"
      end
      # resource path
      local_var_path = '/api/boards/{board}/lists/{list}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'list' + '}', list.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Lists')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a List to a board
    # @param title the title of the List 
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def new_list(title, board, opts = {})
      data, _status_code, _headers = new_list_with_http_info(title, board, opts)
      data
    end

    # Add a List to a board
    # @param title the title of the List 
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def new_list_with_http_info(title, board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListsApi.new_list ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling ListsApi.new_list"
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling ListsApi.new_list"
      end
      # resource path
      local_var_path = '/api/boards/{board}/lists'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['title'] = title

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#new_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
