=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class CardCommentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a comment on a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param comment the ID of the comment to delete 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def delete_comment(board, card, comment, opts = {})
      data, _status_code, _headers = delete_comment_with_http_info(board, card, comment, opts)
      data
    end

    # Delete a comment on a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param comment the ID of the comment to delete 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def delete_comment_with_http_info(board, card, comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardCommentsApi.delete_comment ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CardCommentsApi.delete_comment"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardCommentsApi.delete_comment"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CardCommentsApi.delete_comment"
      end
      # resource path
      local_var_path = '/api/boards/{board}/cards/{card}/comments/{comment}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'card' + '}', card.to_s).sub('{' + 'comment' + '}', comment.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardCommentsApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all comments attached to a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2004>]
    def get_all_comments(board, card, opts = {})
      data, _status_code, _headers = get_all_comments_with_http_info(board, card, opts)
      data
    end

    # Get all comments attached to a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2004>, Fixnum, Hash)>] Array<InlineResponse2004> data, response status code and response headers
    def get_all_comments_with_http_info(board, card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardCommentsApi.get_all_comments ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CardCommentsApi.get_all_comments"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardCommentsApi.get_all_comments"
      end
      # resource path
      local_var_path = '/api/boards/{board}/cards/{card}/comments'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'card' + '}', card.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2004>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardCommentsApi#get_all_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a comment on a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param comment the ID of the comment to retrieve 
    # @param [Hash] opts the optional parameters
    # @return [CardComments]
    def get_comment(board, card, comment, opts = {})
      data, _status_code, _headers = get_comment_with_http_info(board, card, comment, opts)
      data
    end

    # Get a comment on a card
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param comment the ID of the comment to retrieve 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardComments, Fixnum, Hash)>] CardComments data, response status code and response headers
    def get_comment_with_http_info(board, card, comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardCommentsApi.get_comment ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CardCommentsApi.get_comment"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardCommentsApi.get_comment"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CardCommentsApi.get_comment"
      end
      # resource path
      local_var_path = '/api/boards/{board}/cards/{card}/comments/{comment}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'card' + '}', card.to_s).sub('{' + 'comment' + '}', comment.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardComments')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardCommentsApi#get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a comment on a card
    # @param author_id the user who &#39;posted&#39; the comment 
    # @param comment the comment value
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def new_comment(author_id, comment, board, card, opts = {})
      data, _status_code, _headers = new_comment_with_http_info(author_id, comment, board, card, opts)
      data
    end

    # Add a comment on a card
    # @param author_id the user who &#39;posted&#39; the comment 
    # @param comment the comment value
    # @param board the board ID of the card 
    # @param card the ID of the card 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def new_comment_with_http_info(author_id, comment, board, card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardCommentsApi.new_comment ...'
      end
      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling CardCommentsApi.new_comment"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling CardCommentsApi.new_comment"
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CardCommentsApi.new_comment"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardCommentsApi.new_comment"
      end
      # resource path
      local_var_path = '/api/boards/{board}/cards/{card}/comments'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'card' + '}', card.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['authorId'] = author_id
      form_params['comment'] = comment

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardCommentsApi#new_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
