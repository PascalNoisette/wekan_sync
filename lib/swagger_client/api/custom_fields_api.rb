=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class CustomFieldsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Custom Fields attached to a board
    # The Custom Field can't be retrieved after this operation 
    # @param board the board value
    # @param custom_field the ID of the custom field 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def delete_custom_field(board, custom_field, opts = {})
      data, _status_code, _headers = delete_custom_field_with_http_info(board, custom_field, opts)
      data
    end

    # Delete a Custom Fields attached to a board
    # The Custom Field can&#39;t be retrieved after this operation 
    # @param board the board value
    # @param custom_field the ID of the custom field 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def delete_custom_field_with_http_info(board, custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.delete_custom_field ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CustomFieldsApi.delete_custom_field"
      end
      # verify the required parameter 'custom_field' is set
      if @api_client.config.client_side_validation && custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'custom_field' when calling CustomFieldsApi.delete_custom_field"
      end
      # resource path
      local_var_path = '/api/boards/{board}/custom-fields/{customField}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'customField' + '}', custom_field.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#delete_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of Custom Fields attached to a board
    # @param board the board value
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2006>]
    def get_all_custom_fields(board, opts = {})
      data, _status_code, _headers = get_all_custom_fields_with_http_info(board, opts)
      data
    end

    # Get the list of Custom Fields attached to a board
    # @param board the board value
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2006>, Fixnum, Hash)>] Array<InlineResponse2006> data, response status code and response headers
    def get_all_custom_fields_with_http_info(board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.get_all_custom_fields ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CustomFieldsApi.get_all_custom_fields"
      end
      # resource path
      local_var_path = '/api/boards/{board}/custom-fields'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2006>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#get_all_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Custom Fields attached to a board
    # @param board the board value
    # @param custom_field the ID of the custom field 
    # @param [Hash] opts the optional parameters
    # @return [CustomFields]
    def get_custom_field(board, custom_field, opts = {})
      data, _status_code, _headers = get_custom_field_with_http_info(board, custom_field, opts)
      data
    end

    # Get a Custom Fields attached to a board
    # @param board the board value
    # @param custom_field the ID of the custom field 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomFields, Fixnum, Hash)>] CustomFields data, response status code and response headers
    def get_custom_field_with_http_info(board, custom_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.get_custom_field ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CustomFieldsApi.get_custom_field"
      end
      # verify the required parameter 'custom_field' is set
      if @api_client.config.client_side_validation && custom_field.nil?
        fail ArgumentError, "Missing the required parameter 'custom_field' when calling CustomFieldsApi.get_custom_field"
      end
      # resource path
      local_var_path = '/api/boards/{board}/custom-fields/{customField}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'customField' + '}', custom_field.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomFields')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#get_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Custom Field
    # @param name the name of the custom field 
    # @param type the type of the custom field 
    # @param settings the settings object of the custom field 
    # @param show_on_card should we show the custom field on cards? 
    # @param automatically_on_card should the custom fields automatically be added on cards? 
    # @param show_label_on_mini_card should the label of the custom field be shown on minicards? 
    # @param author_id the authorId value
    # @param board the board value
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def new_custom_field(name, type, settings, show_on_card, automatically_on_card, show_label_on_mini_card, author_id, board, opts = {})
      data, _status_code, _headers = new_custom_field_with_http_info(name, type, settings, show_on_card, automatically_on_card, show_label_on_mini_card, author_id, board, opts)
      data
    end

    # Create a Custom Field
    # @param name the name of the custom field 
    # @param type the type of the custom field 
    # @param settings the settings object of the custom field 
    # @param show_on_card should we show the custom field on cards? 
    # @param automatically_on_card should the custom fields automatically be added on cards? 
    # @param show_label_on_mini_card should the label of the custom field be shown on minicards? 
    # @param author_id the authorId value
    # @param board the board value
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def new_custom_field_with_http_info(name, type, settings, show_on_card, automatically_on_card, show_label_on_mini_card, author_id, board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomFieldsApi.new_custom_field ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'settings' is set
      if @api_client.config.client_side_validation && settings.nil?
        fail ArgumentError, "Missing the required parameter 'settings' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'show_on_card' is set
      if @api_client.config.client_side_validation && show_on_card.nil?
        fail ArgumentError, "Missing the required parameter 'show_on_card' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'automatically_on_card' is set
      if @api_client.config.client_side_validation && automatically_on_card.nil?
        fail ArgumentError, "Missing the required parameter 'automatically_on_card' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'show_label_on_mini_card' is set
      if @api_client.config.client_side_validation && show_label_on_mini_card.nil?
        fail ArgumentError, "Missing the required parameter 'show_label_on_mini_card' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'author_id' is set
      if @api_client.config.client_side_validation && author_id.nil?
        fail ArgumentError, "Missing the required parameter 'author_id' when calling CustomFieldsApi.new_custom_field"
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling CustomFieldsApi.new_custom_field"
      end
      # resource path
      local_var_path = '/api/boards/{board}/custom-fields'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['name'] = name
      form_params['type'] = type
      form_params['settings'] = settings
      form_params['showOnCard'] = show_on_card
      form_params['automaticallyOnCard'] = automatically_on_card
      form_params['showLabelOnMiniCard'] = show_label_on_mini_card
      form_params['authorId'] = author_id

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomFieldsApi#new_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
