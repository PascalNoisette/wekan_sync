=begin
#Wekan REST API

#The REST API allows you to control and extend Wekan with ease.  If you are an end-user and not a dev or a tester, [create an issue](https://github.com/wekan/wekan/issues/new) to request new APIs.  > All API calls in the documentation are made using `curl`.  However, you are free to use Java / Python / PHP / Golang / Ruby / Swift / Objective-C / Rust / Scala / C# or any other programming languages.  # Production Security Concerns When calling a production Wekan server, ensure it is running via HTTPS and has a valid SSL Certificate. The login method requires you to post your username and password in plaintext, which is why we highly suggest only calling the REST login api over HTTPS. Also, few things to note:  * Only call via HTTPS * Implement a timed authorization token expiration strategy * Ensure the calling user only has permissions for what they are calling and no more 

OpenAPI spec version: v4.17

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class IntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete integration
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def delete_integration(board, int, opts = {})
      data, _status_code, _headers = delete_integration_with_http_info(board, int, opts)
      data
    end

    # Delete integration
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def delete_integration_with_http_info(board, int, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.delete_integration ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.delete_integration"
      end
      # verify the required parameter 'int' is set
      if @api_client.config.client_side_validation && int.nil?
        fail ArgumentError, "Missing the required parameter 'int' when calling IntegrationsApi.delete_integration"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations/{int}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'int' + '}', int.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#delete_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete subscribed activities
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Integrations]
    def delete_integration_activities(board, int, opts = {})
      data, _status_code, _headers = delete_integration_activities_with_http_info(board, int, opts)
      data
    end

    # Delete subscribed activities
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integrations, Fixnum, Hash)>] Integrations data, response status code and response headers
    def delete_integration_activities_with_http_info(board, int, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.delete_integration_activities ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.delete_integration_activities"
      end
      # verify the required parameter 'int' is set
      if @api_client.config.client_side_validation && int.nil?
        fail ArgumentError, "Missing the required parameter 'int' when calling IntegrationsApi.delete_integration_activities"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations/{int}/activities'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'int' + '}', int.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integrations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#delete_integration_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit integration data
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enabled is the integration enabled? 
    # @option opts [String] :title new name of the integration 
    # @option opts [String] :url new URL of the integration 
    # @option opts [String] :token new token of the integration 
    # @option opts [String] :activities new list of activities of the integration 
    # @return [InlineResponse2002]
    def edit_integration(board, int, opts = {})
      data, _status_code, _headers = edit_integration_with_http_info(board, int, opts)
      data
    end

    # Edit integration data
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enabled is the integration enabled? 
    # @option opts [String] :title new name of the integration 
    # @option opts [String] :url new URL of the integration 
    # @option opts [String] :token new token of the integration 
    # @option opts [String] :activities new list of activities of the integration 
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def edit_integration_with_http_info(board, int, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.edit_integration ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.edit_integration"
      end
      # verify the required parameter 'int' is set
      if @api_client.config.client_side_validation && int.nil?
        fail ArgumentError, "Missing the required parameter 'int' when calling IntegrationsApi.edit_integration"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations/{int}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'int' + '}', int.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['url'] = opts[:'url'] if !opts[:'url'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?
      form_params['activities'] = opts[:'activities'] if !opts[:'activities'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#edit_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all integrations in board
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<Integrations>]
    def get_all_integrations(board, opts = {})
      data, _status_code, _headers = get_all_integrations_with_http_info(board, opts)
      data
    end

    # Get all integrations in board
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integrations>, Fixnum, Hash)>] Array<Integrations> data, response status code and response headers
    def get_all_integrations_with_http_info(board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_all_integrations ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.get_all_integrations"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Integrations>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_all_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single integration in board
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Integrations]
    def get_integration(board, int, opts = {})
      data, _status_code, _headers = get_integration_with_http_info(board, int, opts)
      data
    end

    # Get a single integration in board
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integrations, Fixnum, Hash)>] Integrations data, response status code and response headers
    def get_integration_with_http_info(board, int, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_integration ...'
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.get_integration"
      end
      # verify the required parameter 'int' is set
      if @api_client.config.client_side_validation && int.nil?
        fail ArgumentError, "Missing the required parameter 'int' when calling IntegrationsApi.get_integration"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations/{int}'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'int' + '}', int.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integrations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new integration
    # @param url the URL of the integration 
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def new_integration(url, board, opts = {})
      data, _status_code, _headers = new_integration_with_http_info(url, board, opts)
      data
    end

    # Create a new integration
    # @param url the URL of the integration 
    # @param board the board ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def new_integration_with_http_info(url, board, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.new_integration ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling IntegrationsApi.new_integration"
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.new_integration"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations'.sub('{' + 'board' + '}', board.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['url'] = url

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#new_integration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add subscribed activities
    # @param activities the activities value
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Integrations]
    def new_integration_activities(activities, board, int, opts = {})
      data, _status_code, _headers = new_integration_activities_with_http_info(activities, board, int, opts)
      data
    end

    # Add subscribed activities
    # @param activities the activities value
    # @param board the board ID 
    # @param int the integration ID 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integrations, Fixnum, Hash)>] Integrations data, response status code and response headers
    def new_integration_activities_with_http_info(activities, board, int, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.new_integration_activities ...'
      end
      # verify the required parameter 'activities' is set
      if @api_client.config.client_side_validation && activities.nil?
        fail ArgumentError, "Missing the required parameter 'activities' when calling IntegrationsApi.new_integration_activities"
      end
      # verify the required parameter 'board' is set
      if @api_client.config.client_side_validation && board.nil?
        fail ArgumentError, "Missing the required parameter 'board' when calling IntegrationsApi.new_integration_activities"
      end
      # verify the required parameter 'int' is set
      if @api_client.config.client_side_validation && int.nil?
        fail ArgumentError, "Missing the required parameter 'int' when calling IntegrationsApi.new_integration_activities"
      end
      # resource path
      local_var_path = '/api/boards/{board}/integrations/{int}/activities'.sub('{' + 'board' + '}', board.to_s).sub('{' + 'int' + '}', int.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data', 'application/json'])

      # form parameters
      form_params = {}
      form_params['activities'] = activities

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integrations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#new_integration_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
